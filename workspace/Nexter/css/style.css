*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  box-sizing: border-box;
  font-size: 62.5%; }

body {
  font-family: "Nunito", sans-serif;
  color: #6D5D4B;
  font-weight: 300;
  line-height: 1.6; }

.container {
  display: grid;
  /*
        With CSS Grid, we really need to think about responsiveness,
        right from the beginning of defining our Grid tracks (rows/columns).
        Hence we are not using pixels, but the real units.

        1st row - Header - 80vh because we want it to be 80% of viewport height.
        2nd row - Features - min-content because we want the row to grow based on content.
                  We could also use 'auto' instead of 'min-content'. It means the same.
                  auto is actually the default if you do not specify anything, 
                  auto basically, also means that it adapts to the content.
        3rd row - Story - 40vw means 40% of viewport width. Here we have used width instead of height
                  that's bcz as we descrease the viewport width, the size of the boxes on this row descrease,
                  i.e. content is adapting based in the viewport WIDTH.
        4th,5th,5th row - Homes, Gallery, Footer - min-content because we want the row to grow based on content.

    */
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  /*
        It's very common in web design to use a design grid, with like 8 or 12 or 16 predefined columns.
        Grid systems like this are widely used in web design.
        For example, Bootstrap has a 12 column grid.
        
        Here we will 'start' with 8 column layout.
        Amd considering 1140px width, each column will have 1140/8 = 142.5 => aprox. 140px
        However when we resize the viewport, we want the content to adapt accordingly.
        So we need to use minmax() function with min width as min-content and max width as 140px.

        Let's add one more column(1st column) for sidebar as 8rem.

        Now the last step is to basically center last eight columns between end of the viewport and the sidebar.
        How can we easily achieve this?
        We could simply add two more columns, one to each side of these eight columns. 
        So one here on the left side, and then one on the right side.
        And we want both of them to occupy the remaining of the space (i.e. 1fr each).
        If we now decrease the viewport, you will see that these ones are the ones that start to shrink first.
        So this last one and this one after sidebar. So they start to shrink first because the are the ones
        that occupy the fractional space (the remaining space).
        Having 1fr will add reamining space available, however if viewport is decreased, we may not have remaining space
        but we should have some minimum margin between sidebar and the section/content, 
        so instead of just using 1fr, we can use minmax(6rem, 1fr). 
        This will ensure at least 60px margin between sidebar and the content.
        And so that is kind of what we wanted, having our eight columns centered right in the viewport.

        ( If we hadn't the sidebar at first column, then we could've used the margin: auto,  trick.
        Or we could also have used, the justify content property of the grid. But because we want the sidebar
        exactly t the left side first row, we cannot use these 2 options.)

        Another important reason why we want to do it like this is - 
        For instance some sections like gallery, footer and even header sections that go from one side to the other 
        and actually break out of the 8 columns. That's what we call the "full-bleed sections".
        So we then need these 2 columns on the left side and on the right side 
        to basically break out of our predefined eight column grid that we have in the middle of the page.
        And so that's another thing that this layout allows us to do perfectly.

        So this is perfect for having full-bleed sections in the middle of some eight column sections.
        And actually this is a trend that we've been seeing more and more in web design - 
        So having a couple of design elements which are centered in the viewport 
        like we have here with these eight columns, but then sometimes we have some full-bleed sections
        in the middle of that. And so grid layout is perfect for doing exactly that.

        Summary - 
        1. So we started with an eight column layout, 
        2. Then on the left side we added the sidebar,
        3. Then we added a column on the left side and one on the right side, 
           which both occupy the remaining, in order to center these eight columns in the middle of the page.
           And if we then want a full-bleed section, we can occupy the contents 
           and have a section that goes all the way from the left side to the right side, for example.
           And with that, we can kind of break the inner eight column layout.

        Now let's name the column grid lines - sidebar-start, sidebar-end, full-start, full-end, center-sart, center-end
        col-start 1 tot8, col-end 1 to 8.
        We generally do not name rows, because for the overall layout the focus is mostly on the columns due to responsive design
    */
  grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end]; }

.heading-1, .heading-2, .heading-3, .heading-4 {
  font-family: "Josefin Sans", sans-serif;
  font-weight: 400; }

.heading-1 {
  font-size: 4.5rem;
  color: #f9f7f6;
  line-height: 1; }

.heading-2 {
  font-size: 4rem;
  font-style: italic;
  line-height: 1; }
  .heading-2--light {
    color: #f9f7f6; }
  .heading-2--dark {
    color: #54483A; }

.heading-3 {
  font-size: 1.6rem;
  color: #c69963;
  text-transform: uppercase; }

.heading-4 {
  font-size: 1.9rem; }
  .heading-4--light {
    color: #f9f7f6; }
  .heading-4--dark {
    color: #54483A; }

.btn {
  background-color: #c69963;
  color: #fff;
  border: none;
  border-radius: 0;
  font-family: "Josefin Sans", sans-serif;
  font-size: 1.5rem;
  text-transform: uppercase;
  padding: 1.8rem 3rem;
  cursor: pointer;
  transition: all .2s; }
  .btn:hover {
    background-color: #B28451; }

.mb-sm {
  margin-bottom: 2rem; }

.mb-md {
  margin-bottom: 3rem; }

.mb-lg {
  margin-bottom: 4rem; }

.mb-hg {
  margin-bottom: 8rem; }

.sidebar {
  background-color: #c69963;
  grid-column: sidebar-start / sidebar-end;
  grid-row: 1 / -1;
  display: flex;
  justify-content: center; }

.nav-btn {
  border: none;
  border-radius: 0;
  background-color: #fff;
  height: 2px;
  width: 4.5rem;
  margin-top: 4rem;
  cursor: pointer;
  outline: none; }
  .nav-btn::before, .nav-btn::after {
    content: '';
    display: block;
    background-color: #fff;
    height: 2px;
    width: 4.5rem;
    cursor: pointer; }
  .nav-btn::before {
    transform: translateY(-1.5rem); }
  .nav-btn::after {
    transform: translateY(1.5rem); }

.header {
  background-color: #54483A;
  background-image: linear-gradient(rgba(16, 29, 44, 0.93), rgba(16, 29, 44, 0.93)), url(../img/hero.jpeg);
  background-size: cover;
  background-position: center;
  padding: 8rem;
  padding-top: 4rem;
  /*
        Header-Row section is divided into 2 parts, header and realtors.
        Of the total 8 columns, We want the header to span 6 columns and realtors to have 2 columns.
        However this section is going to be full-bleed section, so we can make use of the additional 2 columns.
        Hence the first part (header) will span from full-start till end of column 6 (which is also start of column 7)
        And the 2nd part (realtors) will span from end of column 6 (which is also start of column 7) till full-end.
    */
  grid-column: full-start / col-end 6;
  display: grid;
  /* explicit grid for logo as 1fr so that we can see a big gap between logo and rest.
       min-content - for h4 heading
       6rem - for h1 heading
       1fr - for button
    */
  grid-template-rows: 1fr min-content 6rem 1fr;
  /* Logo is not looking at the center w.r.t other items of this grid.
       That's because by default the grid column width is all available space.
       We should make it so that the column width will be equal to the size of the largest content/item. */
  grid-template-columns: max-content;
  row-gap: 1.5rem;
  justify-content: center; }
  .header__logo {
    height: 3rem;
    justify-self: center; }
  .header__btn {
    align-self: start;
    justify-self: start; }
  .header__seenon-text {
    display: grid;
    grid-template-columns: 1fr max-content 1fr;
    column-gap: 1.5rem;
    align-items: center;
    font-size: 1.6rem;
    color: #aaa; }
    .header__seenon-text::before, .header__seenon-text::after {
      content: '';
      display: block;
      height: 1px;
      background-color: currentColor; }
  .header__seenon-logos {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    column-gap: 3rem;
    justify-items: center; }
    .header__seenon-logos img {
      height: 2.5rem;
      filter: brightness(70%); }

.realtors {
  background-color: #101d2c;
  padding: 3rem;
  /*
        Header-Row section is divided into 2 parts, header and realtors.
        Of the total 8 columns, We want the header to span 6 columns and realtors to have 2 columns.
        However this section is going to be full-bleed section, so we can make use of the additional 2 columns.
        Hence the first part (header) will span from full-start till end of column 6 (which is also start of column 7)
        And the 2nd part (realtors) will span from end of column 6 (which is also start of column 7) till full-end.
    */
  grid-column: col-start 7 / full-end;
  display: grid;
  row-gap: 2rem;
  align-content: center;
  justify-content: center;
  justify-items: center; }
  .realtors__list {
    display: grid;
    /* 1st column - min-content - as we have defined width for img to 7rem. So it should fit that
           2nd column - max-content - so that the text doesn't create any line breaks for the content. */
    grid-template-columns: min-content max-content;
    column-gap: 2.5rem;
    row-gap: 4vh;
    align-items: center; }
  .realtors__sold {
    text-transform: uppercase;
    color: #aaa;
    margin-top: -3px; }
  .realtors__img {
    width: 7rem;
    border-radius: 50%;
    display: block; }

.features {
  grid-column: center-start / center-end;
  margin: 15rem 0;
  display: grid;
  /*
        We basically want 3 columns and 2 rows. So this will do - 
        grid-template-columns: repeat(3, 1fr);
        However for responsive design this will not look properly on small devices.
        What we want is the width of the column track should be between 250px and 1 fractional unit.
        and CSS should add as many tracks as it can fit in the container based on the viewport width. */
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  gap: 6rem;
  align-items: start; }

.feature {
  display: grid;
  grid-template-columns: min-content 1fr;
  row-gap: 1.5rem;
  column-gap: 2.5rem; }
  .feature__icon {
    fill: #c69963;
    width: 4.5rem;
    height: 4.5rem;
    grid-row: 1 / span 2;
    /* so that the icon should span entire column
                                -1 instead of span 2 won't work here, bcz -1 means end of explicit grid.
                                However we have ony one row in explicit grid (as we have not defined grid-template-rows)
                              */
    transform: translateY(-1rem); }
  .feature__text {
    font-size: 1.7rem; }

.story {
  /*
        Story section is divided into 2 parts, Story Picture and Story Content.
        Of the total 8 columns, We want the Picture to span 4 columns and realtors to have 4 columns.
        However this section is going to be full-bleed section, so we can make use of the additional 2 columns.
        Hence the first part (Picture) will span from full-start till end of column 4 (which is also start of column 5)
        And the 2nd part (Content) will span from end of column 4 (which is also start of column 5) till full-end.
    */ }
  .story__pictures {
    background-color: #c69963;
    grid-column: full-start / col-end 4;
    background-image: linear-gradient(rgba(198, 153, 99, 0.5), rgba(198, 153, 99, 0.5)), url(../img/back.jpg);
    display: grid;
    /*
            We want a 6 X 6 grid, so that we can place the img--1 in 2/3rd part and remaining 1/3rd part will be empty.
        */
    grid-template-rows: repeat(6, 1fr);
    grid-template-columns: repeat(6, 1fr);
    /* Grid item by default tries to stretch itself, but with images it's different.
        Image has specific dimensions and it always tries to keep its aspect ratio.
        So we should use align-items: center; if we want the image to be exactly at the center  */
    align-items: center; }
  .story__img--1 {
    width: 100%;
    grid-row: 2 / 6;
    grid-column: 2 / 6;
    box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.1); }
  .story__img--2 {
    width: 115%;
    grid-row: 4 / 6;
    grid-column: 4 / 7;
    z-index: 20;
    box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.2); }
  .story__content {
    background-color: #f9f7f6;
    grid-column: col-start 5 / full-end;
    padding: 6rem 8vw;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    /*
        display: grid;
        align-content: center;  // to align grid track vertically
        justify-items: start;   // to align grid items horizontally
        */ }
  .story__text {
    font-size: 1.5rem;
    font-style: italic;
    margin-bottom: 4rem; }

.homes {
  grid-column: center-start / center-end;
  margin: 15rem 0;
  display: grid;
  /*
        We basically want 3 columns and 2 rows. So this will do - 
        grid-template-columns: repeat(3, 1fr);
        However for responsive design this will not look properly on small devices.
        What we want is the width of the column track should be between 250px and 1 fractional unit.
        and CSS should add as many tracks as it can fit in the container based on the viewport width. */
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  gap: 7rem; }

.home {
  background-color: #f9f7f6;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  row-gap: 3.5rem; }
  .home__img {
    width: 100%;
    grid-column: 1 / -1;
    grid-row: 1 / 2;
    z-index: 1; }
  .home__like {
    /* Here we will use overlapping. 
           Basically placing this like Grid item on top of the image on another Grid cell. 
           Be defining grid-row and grid-column, we can set the position for this item.
           However this will not be on top of img grid item, that because CSS Automatic Placement Algorithm
           does not place grid items one on top of each other, 
           but instead it moves one of the items(least specific configuration) in next cell.
           In order to have both the grid items on top of each other, we need to specify grid-row for img grid item as well */
    grid-row: 1 / 2;
    grid-column: 2 / 3;
    z-index: 2;
    justify-self: end;
    margin: 1rem;
    fill: #c69963;
    height: 2rem;
    width: 2rem; }
  .home__name {
    font-family: "Josefin Sans", sans-serif;
    font-size: 1.6rem;
    font-weight: 400;
    text-align: center;
    padding: 1.25rem;
    background-color: #101d2c;
    color: #fff;
    grid-column: 1 / -1;
    width: 80%;
    justify-self: center;
    grid-row: 1 / 2;
    z-index: 2;
    align-self: end;
    transform: translateY(50%); }
  .home__location, .home__rooms {
    /* Since &__name is moved down due to transform, it overlaps some of the row-gap. 
           This crates an inconsitent spacing overall. */
    margin-top: 2.5rem; }
  .home__location, .home__rooms, .home__area, .home__price {
    font-size: 1.5rem;
    margin-left: 2rem;
    display: flex;
    align-items: center; }
    .home__location svg, .home__rooms svg, .home__area svg, .home__price svg {
      fill: #c69963;
      height: 2rem;
      width: 2rem;
      /* To have some space between icon and the text - 
               We can specify space gaps in Flexbox like we do in Grids using gap property. 
               However the browser support for gap proeprty in Flexbox is low as of today.
               Hence fixing this issue using margin trick. */
      margin-right: 1rem; }
  .home__btn {
    grid-column: 1 / -1; }

.gallery {
  background-color: #f9f7f6;
  grid-column: full-start / full-end;
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(7, 5vw);
  gap: 1.5rem;
  padding: 1.5rem; }
  .gallery__item--1 {
    grid-row: 1 / span 2;
    grid-column: 1 / span 2; }
  .gallery__item--2 {
    grid-row: 1 / span 3;
    grid-column: 3 / span 3; }
  .gallery__item--3 {
    grid-row: 1 / span 2;
    grid-column: 6 / span 1; }
  .gallery__item--4 {
    grid-row: 1 / span 2;
    grid-column: 7 / span 2; }
  .gallery__item--5 {
    grid-row: 3 / span 3;
    grid-column: 1 / span 2; }
  .gallery__item--6 {
    grid-row: 4 / span 2;
    grid-column: 3 / span 2; }
  .gallery__item--7 {
    grid-row: 4 / span 1;
    grid-column: 5 / span 1; }
  .gallery__item--8 {
    grid-row: 3 / span 2;
    grid-column: 6 / span 2; }
  .gallery__item--9 {
    grid-row: 3 / span 3;
    grid-column: 8 / span 1; }
  .gallery__item--10 {
    grid-row: 6 / span 2;
    grid-column: 1 / span 1; }
  .gallery__item--11 {
    grid-row: 6 / span 2;
    grid-column: 2 / span 2; }
  .gallery__item--12 {
    grid-row: 6 / span 2;
    grid-column: 4 / span 1; }
  .gallery__item--13 {
    grid-row: 5 / span 3;
    grid-column: 5 / span 3; }
  .gallery__item--14 {
    grid-row: 6 / span 2;
    grid-column: 8 / span 1; }
  .gallery__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block; }

.footer {
  background-color: #101d2c;
  grid-column: full-start / full-end;
  padding: 8rem; }

.nav {
  list-style: none;
  /*
        We can implement this either using Flexbox or Grid.
        With Flexbox - we would need to manually manage the space between items 
                       (until 'gap' property is widely supported by different browsers).
        With Grid - space can be easily taken care using grid gutters.
    */
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
  gap: 2rem;
  align-items: center; }
  .nav__link:link, .nav__link:visited {
    font-family: "Josefin Sans", sans-serif;
    font-size: 1.1rem;
    color: #fff;
    text-decoration: none;
    text-transform: uppercase;
    text-align: center;
    padding: 1.5rem;
    display: block;
    transition: all .2s; }
  .nav__link:hover, .nav__link:active {
    background-color: rgba(255, 255, 255, 0.05);
    transform: translateY(-3px); }

.copyright {
  font-size: 1.1rem;
  color: #aaa;
  margin-top: 6rem;
  width: 70%;
  margin-right: auto;
  margin-left: auto;
  text-align: center; }
