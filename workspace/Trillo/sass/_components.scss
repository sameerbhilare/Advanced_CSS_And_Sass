/*
    We will write all the code for all the smaller components into this file.
    These are not really components in the meaning that they're not necessarily really reusable across projects
    but I'm still calling them simply components here because that's the easiest way to do it here.
*/

/*************************************
 LOGO
*/
.logo {
    height: 3.25rem;
    margin-left: 2rem;
}


/*************************************
 SEARCH BOX
*/
.search {

    flex: 0 0 40%; // to give width to the flex item

    /* when the input field is not active, we want search button to be at the center of search input element.
      So, of the parent element. The best solution is, once again, to use Flexbox.
      And so you see, each time we want to center something, or to align something, we can always use Flexbox.
      For Flexbox is perfect for all of these small situations where we need to align or center some elements.

      this element is basically a flex-item. And it is becoming a flex container. Nested Flexbox. :)
    */
    display: flex;
    align-items: center; // to center centers the elements along the cross axis
    justify-content: center; // centers the elements along the main axis.

    &__input {
        /* An input element doesn't inherit the font related proeprties of the global document.
           And so we have to automatically set it to inherit here. */
        font-family: inherit;
        font-size: inherit;
        color: inherit;

        background-color: var(--color-grey-light-2);
        border: none;
        padding: .7rem 2rem;
        border-radius: 100px; // so that it has these rounded edges.
        width: 90%; // initial width
        transition: all .2s;

        /* In order to have button on top of input box, 
           we should give the input some negative margin on the right side. 
           This way, the button will move on top of the input. */
        margin-right: -3.25rem;

        &:focus {
            outline: none; // we don't want browser specific outline around the focused element.
            width: 100%;
            background-color: var(--color-grey-light-3);
        }

        /* Basically the placeholder should have lighter text. 
           And when we start typing, it becomes the dark text. */
        &::-webkit-input-placeholder {
            font-weight: 100;
            color: var(--color-grey-light-4);
        }
        
        &::placeholder {
            font-weight: 100;
            color: var(--color-grey-light-4);
        }
    }

    /* set the background color of the button to the same color of when the input is focused, 
       + adjacent sibling. */
    &__input:focus + &__button {
        background-color: var(--color-grey-light-3);
    }

    &__button {
        border: none;
        /* the same background color as the input because we basically want it to be like on top of the input.
           in order for that to happen, we should give the input here some negative margin on the right side. */
        background-color: var(--color-grey-light-2); 

        &:focus {
            outline: none; // we don't want browser specific outline around the focused element.
        }

        &:active {
            // basically when we click the button, we just want it to move a bit down.
            transform: translateY(2px);
        }
    }

    &__icon {
        height: 2rem;
        width: 2rem;
        fill: var(--color-grey-dark-3); // to change the svg color
    }
}



/*************************************
 USER NAVigation
*/
.user-nav {

    /*  user-nav is itself a flex item. 
        All flex items are center aligned as defined in .header's align-items property.
        But we want to override specifically this flex-item. Hence we need o use align-self flex-item property.
        We want to stretch it bcz on hover we want to show grey color for whole box
    */
    align-self: stretch;

    // Nested Flexbox
    display: flex;
    align-items: center;

    // usr-nav and all of its direct children
    & > * {
        padding: 0 2rem;
        cursor: pointer;
        height: 100%; // bcz on hover we want to show grey color for whole box

        /* This is 3rd level of nested flex container.
           header is a flex container, then the user-nav is a flex container,
           and now the icon-box and user as flex containers. */
        display: flex; 
        align-items: center; // aligns the flex items along the cross axis, so usually vertically.
    }

    // usr-nav and all of its direct children - on hover should have grey background
    & > *:hover {
        background-color: var(--color-grey-light-2);
    }

    &__icon-box {
        position: relative; // bcz child &_notification is absolute positioned
    }

    &__icon {
        height: 2.25rem;
        width: 2.25rem;
        fill: var(--color-grey-dark-2); // changing color of the svg icon
    }

    &__notification {
        font-size: .8rem;

        // create a circle
        height: 1.75rem;
        width: 1.75rem;
        border-radius: 50%;
        background-color: var(--color-primary);
        color: #fff;

        position: absolute; // it's parent should be se to relative
        top: 1.5rem;
        right: 1.1rem;

        /* This is an amazing trick. Flexbox also works with text element.
           Here basically we want to center the text in the rounded pink circle. */
        display: flex;  // 4th level of nested flexbox.
        justify-content: center;
        align-items: center;
    }

    &__user-photo {
        height: 3.75rem;
        border-radius: 50%;
        margin-right: 1rem;
    }

}



/*************************************
 SIDE NAVIGATION
*/
.side-nav {

    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;

    &__item {
        position: relative; // bcz child pseudo element(::before) is absolute

        &:not(:last-child) {
            margin-bottom: .5rem; // for space between navigation items
        }
    }

    /*  In order to have the animation effect of showing pink box from left to right, 
        we're going to use a before pseudo element, which we basically place before this list item
        and that is the one that will show as soon as we hover on this item.
        so that it will show and then grow to the right side. */
    &__item::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        height: 100%; // to have exactly the same height as the list item
        width: 3px;
        background-color: var(--color-primary);
        transform: scaleY(0);

        /* basically it starts in the middle and then it grows to the sides, 
           and so it grows in the Y direction because we're using scale Y.
           That's because the transform-origin is by default set to center. 
           
           We need to add a delay to the width becausee if we don't, it will simply
           expand immediately and then you'll see it's scaling, but that's not what we want. 

           There's an ability in the transition property to add different settings for different properties.
           i.e. we can have different durations and also different animation timing functions, differemt delays
           for different properties.
           So for width proprety - 
                transition of .4s and
                delay of .2s (which is exactly the time it takes for the first 'transform' transition. )
            
           This way we can have like the staged animations, where first the transform happens 
           and then the width with the delay. */
        transition: transform .2s,
                    width .4s cubic-bezier(1, 0, 0, 1) .2s, // timing function - cubic-bezier()
                    background-color .1s;

        /* */
    }

    /* On hovering the mail nav item, the pseudo element should transform and scale on Y direction.
       Also the active state should be exactly the same as the hover state. */
    &__item:hover::before,
    &__item--active::before {
        transform: scaleY(1); // to scale only occurs in the Y direction
        width: 100%;
    }

    /* when we click on the item, the color should get a little bit brighter.
       So that at least we have some small active state to show the user that he clicked on the item. */
    &__item:active::before {
        background-color: var(--color-primary-light);
    }

    &__link:link,
    &__link:visited {
        color: var(--color-grey-light-1);
        text-decoration: none;
        text-transform: uppercase;
        display: block;
        padding: 1.5rem 3rem;
        z-index: 10; // to have the link on top o that ::before transform won't overshadow the link
        position: relative; // z-index only works if we have position specified.

        /* side-nav__link and thesvg icon are not aligned properly. so use flexbox. */
        display: flex;
        align-items: center;
    }

    &__icon {
        width: 1.75rem;
        height: 1.75rem;
        margin-right: 2rem;
        fill: currentColor; // currentColor is just the color of the current element or the parent element.
    }
}

/*************************************
 LEGAL TEXT
*/
.legal {
    font-size: 1.2rem;
    text-align-last: center;
    padding: 2.5rem;
    color: var(--color-grey-light-4);
}



/*************************************
 GALLERY
*/
.gallery {

    /* 
    MODERN WAY -
        To put the figure elements side by side is once again to use flexbox.
    OLD WAY -
        We could also set these images to 1/3, so like to 33.333%, and then use float on these figures here.
        So that would produce the same effect. And then we would have to use a clear fix on the parent(.gallery), 
        and all of that is a bunch of work.
    so, once again, we just use flexbox in order to achieve the same result, 
    So put these images side by side without any clear fix hack or anything like that.
    */
    display: flex;

    &__photo {
        /*  In responsive design, we also want flexible images.
            And so, we always have to define a width or a height in percentages so that the image stays fluid.
            Also this is required so that it occupies only the width of it's flex-item, oterwise it will overflow. */
        width: 100%;
        display: block;
    }
}


/*************************************
 HOTEL OVERVIEW
*/
.overview {

    // to all child elements side by side
    display: flex;
    align-items: center;
    border-bottom: var(--line);;
    
    &__heading {
        font-size: 2.25rem;
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding: 1.5rem 3rem; // 1.5rem top and bottom, 3rem left and right
    }

    &__stars {
        /*
        THE PROBLEM:
        With justify-content different options, we will get even or predefined spacing, 
        however sometimes we want uneven or custom alignment of the flex items along the main axis. 
        So in such case, we can’t use justify-content.

        SOLUTION 1:
        We may use flex: 1 for the element which we want to occupy say uneven or custom space. 
        So with flex: 1, that flex item should grow and occupy all the available space.

        PROBLEM WITH SOLUTION 1 (USING flex: 1): 
        This is not ideal, because that flex-item/element should only be the size of its content. We don't want that element to have all of the size (actual size required by the element + All the whitespaces. This can be easily visualized in devtools).
        Imagine that we would have a hover effect on this and then all of that entire element would be hovered. So what we want is a way to create the space on right side of actual stars without actually stretching out that entire element/flex-item. And that is where the power of margin auto comes in.
        
        PROPER SOLUTION (USING margin auto): 
        Use margin: auto (or margin-left: auto or margin-right: auto whichever applicable depending on situation) instead of flex: 1.
        So, the same result, but with our element actually only occupying the space that it needs and then all of the white space is the automatically calculated margin.

        */
        //flex: 1; // this flex item should grow and occupy all the available space.

        margin-right: auto;

        /* Note: svg icons are sometimes really not 100 percent vertically aligned, 
           if you open devtools and see the svg element and the container in which the svg item is placed,  
           you see that there is like, a small space below each of the svg icon. 
           And that happens because these SVG elements behave like in-line elements, 
           and so it's a bit like text that produces that small white space that we see. 
           We can remove that by setting the line height and the font size to zero for example, 
           but we have a simpler way of doing that by setting their parent element to Flexbox */
        display: flex;

    }

    &__icon-star,
    &__icon-location {
        width: 1.75rem;
        height: 1.75rem;
        fill: var(--color-primary);
    }

    &__location {
        font-size: 1.2rem;
        // we want to vertically align the icon and the button.
        display: flex;
        align-items: center;
    }

    &__icon-location {
        margin-right: .5rem; // for some spacing between the icon and the button
    }

    &__rating {
        background-color: var(--color-primary);
        color: #fff;
        margin-left: 3rem;
        padding: 0 2.25rem;
        align-self: stretch; // We want this particular flex-item to stretch all the way from the top to the bottom,

        // to rating-average and rating-count one below each other
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    &__rating-average {
        font-size: 2.25rem; // big font
        font-weight: 300; // small weight
        //margin-bottom: -3px;
    }

    &__rating-count {
        font-size: .8rem;
        text-transform: uppercase;
    }
}



/*************************************
 BUTTON INLINE
*/
.btn-inline {
    border: none; // buttons by default always come with this border and we don't want that of course.
    color: var(--color-primary);
    font-size: inherit;
    border-bottom: 1px solid currentColor; // currentColor: the border will have the exact same color as the text. 
                                           // very useful in case of hover effect as well, we don;t have to explicity specify border color again in case of hover
    padding-bottom: 2px;
    display: inline-block;
    background-color: transparent; // imp
    cursor: pointer;
    transition: all .2s;

    & span {
        margin-left: 3px;
        transition: margin-left .2s; // if we use 'all', it will mess up with transition mentioned in .btn-inline
    }

    &:hover {
        color: var(--color-grey-dark-1);

        span {
            margin-left: 8px;
        }
    }

    &:focus {
        outline: none;
        animation: pulsate 1s infinite; // to have infinite animation till the element is focused
    }
}

/* basically in the beginning nothing happens, 
   then in the middle it is scaled up a little bit, and it has this shadow going on,
   and then in the end it goes back to the normal.*/
@keyframes pulsate {
    0% {
        transform: scale(1);
        box-shadow: none;
    }

    50% {
        transform: scale(1.05);
        box-shadow: 0 1rem 4rem rgba(0,0,0,.25);
    }

    100% {
        transform: scale(1);
        box-shadow: none;
    }
}



/*************************************
 PARAGRAPH
*/
.paragraph:not(:last-of-type) { // give margin to all P elements except last p element.
    margin-bottom: 2rem;
}


/*************************************
 LIST
*/
.list {
    list-style: none;
    margin: 3rem 0;
    padding: 3rem 0;
    border-top: var(--line);
    border-bottom: var(--line);

    display: flex; // to put list items side by side
    flex-wrap: wrap; // without wrap the flex items won't remain contained within the container

    &__item {
        flex: 0 0 50%; // 50% width for each flex item (50% bcz we want 2 elements to be side by side)
        margin-bottom: .7rem;
    }

    /* 
        Using SVG directly in CSS 
        In CSS, it's really difficult to use a sprite image like we could in the HTML.
        But in CSS, it's actually much easier to use single icon itself.
        
        How do we actually include an SVG file in our CSS?
        The easiest way is to use a background-image (also the only approach for older browsers). 
        But there is actually a problem with this approach – 
        If we include it as a background image, then we have no way of actually changing the color. But if that's not a problem for your situation, then we can of course go ahead and make it like this.
        
        Another approach - is to use masks (works only in modern browsers)
        Basically a mask defines an area where we can look through the element and see what's behind that element.
        So, basically, what we're going do is to set the background-color of this element to a solid color, and then use the icon as the mask (by putting our mask on top of this, and only in the positions where the icon is).  And so we can then look through that mask, basically, and see the background color in the area where the icon is and everything else is covered,
        So it's basically a bit like clipping (background-clip).
    */
    &__item::before {
        /* in order to actually show that svg icon on page, we must provide these properties for the pseudo element
           content, display, height, width. Otherwise the svg will not be shown. */
        content: '';
        display: inline-block;
        height: 1rem;
        width: 1rem;

        margin-right: .7rem;

        // older browsers
        //background-image: url(../img/chevron-thin-right.svg);
        //background-size: cover;

        // Newer browsers - Use Masks
        background-color: var(--color-primary); // set the background-color of this element to a solid color.
        -webkit-mask-image: url(../img/chevron-thin-right.svg);
        mask-image: url(../img/chevron-thin-right.svg);
        -webkit-mask-size: cover; // similar to background-size, cover - so that the icon covers the entire element. 
        mask-size: cover;
    }
}


/*************************************
 RECOMMEND
*/
.recommend {
    font-size: 1.3rem;
    color: var(--color-grey-dark-3);

    display: flex;
    align-items: center;

    &__count {
        /* same trick as we used for '&__stars' 
        So the margin which was automatically calculated 
        to push the recommend__friends box all the way to the right side. */
        margin-right: auto; // to have space between flex-items
    }

    &__friends{

    }

    &__photo {
        height: 4rem;
        width: 4rem;
        border-radius: 50%;
        border: 3px solid #fff;
        /* Since we have added the border, the border actually goes into these images and the image shrinks.
        we have now two options to fix that, 
            1. We could either add these three pixels on the height and width, 
            2. or we can do it automatically by setting box-sizing: border-box
        For HTML selector, we have set box-sizing to border-box, which includes the padding and the border into the width and height of the element.
        which is usually what we want. 
        However in this particular situation, we want the border to be added on top of our height and the width,
        so we need to set it to content-box (which is the default) */
        box-sizing: content-box;

        /* These images are like on top of each other, like slightly overlapping.
        And we can simply do that by giving them a negative right margin except for the last one.*/
        &:not(:last-child) {
            margin-right: -1.5rem;
        }
    }
}



/*************************************
 REVIEWS
*/
.review {
    background-color: #fff;
    box-shadow: var(--shadow-light);
    padding: 3rem;
    margin-bottom: 3.5rem;
    position: relative; // bcz ::before is absolute
    overflow: hidden; // quote element in ::before was overflowing

    &__text {
        margin-bottom: 2rem;
        z-index: 10;
        position: relative; // never forget the Z index only works if you set the position (no matter what it is)
    }

    &__user {
        display: flex;
        align-items: center;
    }

    &__photo {
        height: 4.5rem;
        width: 4.5rem;
        border-radius: 50%;
        margin-right: 1.5rem;
    }

    &__user-box {
        //flex: 0 0 60%; // no need to write this as margin auto fixes that.
        margin-right: auto;
    }

    &__user-name {
        text-transform: uppercase;
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: .4rem;
    }

    &__user-date {
        font-size: 1rem;
        color: var(--color-grey-dark-3);
    }

    &__rating {
        color: var(--color-primary);
        font-size: 2.2rem;
        font-weight: 300;
    }

    // to have quote marks before this review box.
    &::before {
        content: "\201C";
        position: absolute;
        top: -2.75rem;
        left: -1rem;
        line-height: 1; // since it was occupying too much space
        font-size: 20rem;
        color: var(--color-grey-light-2);
        font-family: sans-serif; // though it inherits Open Sans, but that is not looking good so using sans-serif
        z-index: 1;
    }
}




/*************************************
 CALL TO ACTION (CTA)
*/
.cta {
    padding: 3.5rem;
    text-align: center; // it will align both h2 element and the button.

    &__book-now {
        text-transform: uppercase;
        font-size: 2rem;
        font-weight: 300;
        margin-bottom: 2.5rem;
    }
}


/*************************************
 BUTTON - CALL TO ACTION (CTA)
*/
.btn {
    font-size: 1.5rem;
    font-weight: 300;
    text-transform: uppercase;
    border: none;
    border-radius: 100px; // to have rounded corners
    background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary)); // from left to right
    color: #fff;
    position: relative; // bcz btn__invisible is absolute
    overflow: hidden; // bcz btn__invisible element is outside of the button, so it's an overflow element
    cursor: pointer;

    // all of the child elements
    & > * {
        display: inline-block; // so that we could use padding
        height: 100%; // so that it has the height and the width of the parent element.
        width: 100%;
        transition: all .2s;
    }

    &__visible {
        padding: 2rem 7.5rem;
    }

    &__invisible {
        position: absolute; //  initial position: to put it outside of the button
        padding: 2rem 0; // same as btn__visible, but not left and right padding
        left: 0;

        /* to move up exactly the size of the element. So basically if this element is like 50 pixels high,
           it will move up 100% of that. And so 50 pixels. */
        top: -100%;
    }

    &:hover {
        background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary)); // from right to left
    }

    &:hover &__visible {
        transform: translateY(100%); // should transform in Y direction to 100% of it's height
    }

    &:hover &__invisible {
        top: 0;
    }

    &:focus {
        outline: none;
        animation: pulsate 1s infinite;
    }
}