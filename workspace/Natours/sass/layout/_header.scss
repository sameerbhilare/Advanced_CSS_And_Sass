/*
    In the layouts folder we define the overall layout of the project e.g. global footer, header.
*/

 /* Note this is 'header' class not <header> element */
 .header {
    height: 85vh;
    background-image: linear-gradient( 
                to right bottom,  /* gradient going from top left to right bottom */
                rgba($color-primary-light, 0.8), /* color with opacity in order to see backgound img */
                rgba($color-primary-dark, 0.8)), /* color with opacity in order to see backgound img */
            url(../img/hero-small.jpg); // normal state background image for normal or low resolution displays.
    background-size: cover; /* to cover whole viewport area so that whole image can be seen */
    background-position: top; /* ensure that whatever the viewport size is 
                                 the top of the image always stays at the top of the container. */
    
    position: relative; /* marking it as relative bcz .logo-box & .text-box are marked as absolute. */

    // asks the browser if it supports a certain property along with a value (it could be any value. e.g. polygon(0 0)
    @supports ((clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)) ) {
        /* to clip out a part of the image. 
        There are multiple options but as per our need we need use polygon. 
        polygon just takes cordinates of how you want to see it.
            - for triangle - need to pass 3 cordinates,
            - for rectangle or any shape of 4 points - need to pass 4 cordinates, etc. 
        */
        -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); 
        clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); 
        height: 95vh; /* 95% of viewport height bcz we have added padding for body element. */
    }

    /*
        RESPONSIVE IMAGES IN CSS:
        All we have to do is to write media queries, in order to load different images, for different situations.
        We can not only use Media queries to target just screen or viewport width, 
        but also we can write media queries depending on other things, such as the device resolution.
        
        So to write media query for device resolution, we can use min-resolution/max-resolution.
        Let's set to 192dpi (dots per inch).
        Why 192dpi? Bcz that's the resolution of the Apple retina screen. 
        And that's a high resolution screen that's usually used as a reference.
    */

    /* 
        Large version of the hero image, is shown when the resolution is higher than 192, so when we have 2x screen,
        and at the same time, whenever the width is larger than 600 pixels (37.5em).
        Because If the screen is below 600 and if the pixel density is 2, well then the image that we need 
        at this size doesn't have to be larger than 1200 pixels. So 600 times 2 is 1200, and 
        so an image, which has 1200 pixels of width, is more than enough to display on a high density screen like this.

        Also we want to show high resolution image for really big screens (2000px = 125em)
        even if they are 1x screens. (OR condition)
    */
    @media only screen and (min-resolution: 192dpi) and (min-width: 37.5em), // 192 dots per inch, 37.5em = 600px
           only screen and (-webkit-min-device-pixel-ratio: 2) and (min-width: 37.5em), // for safari, 2 means at least 2x
           only screen and (min-width: 125em) { // to show high resolution image for really big screens even if they are 1x screens.
        background-image: linear-gradient( 
                        to right bottom,  /* gradient going from top left to right bottom */
                        rgba($color-primary-light, 0.8), /* color with opacity in order to see backgound img */
                        rgba($color-primary-dark, 0.8)), /* color with opacity in order to see backgound img */
                      url(../img/hero.jpg); // high resolution background image ****************
    }

    @include respond(phone) {
        // for mobile, the clip-path is too steep. 
        -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%); 
        clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
    }

   // Nesting: &__logo-box means .header__logo-box
   &__logo-box {
       position: absolute;
       top: 4rem;  /* 40px from top w.r.t it's parent element which is header. so mark header as relative. 
                   If it's immediate parent is not marked as 'relative', 
                   then it checks for the reference of the first element with the relative position 
                   that it can find. If it cant's find any thing, it will take reference 
                   w.r.t viewport which is top of the window. */
       left: 4rem; /* 40px from top w.r.t it's parent element which is header. so mark header as relative. */
   }

   // Nesting: &__logo means .header__logo
   &__logo {
       height: 3.5rem;
       width: auto;
   }

   // Nesting: &__text-box means .header__text-box
   &__text-box {
       /*
       top 40% and left 50% - are in relation to the parent element. 
       So 50% of the parent element is where the text box was located to the left side. 
       But, on the transform, when we use translate, this is in relation to the element itself.
       And this makes it possible that the element is exactly at the center.
       */
       position: absolute;
       top: 40%;
       left: 50%;
       transform: translate(-50%, -50%);
       text-align: center;
   }
}
