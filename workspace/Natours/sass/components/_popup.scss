
.popup {
    position: fixed; // doesn't move as we scroll
    top: 0;
    left: 0;
    height: 100vh;
    width: 100%;
    background-color: rgba($color-black, .8);
    z-index: 9999;

    // If we have display:none, we can then not animate it. So use opacity and visibility.
    opacity: 0;
    visibility: hidden;
    transition: all .3s;

    &__content {
        @include absCenter;
        width: 75%;
        //height: 50rem; // only for testing purpose.
        background-color: $color-white;
        border-radius: 3px;
        box-shadow: 0 2rem 4rem rgba($color-black, .2);
        overflow: hidden; /* to avoid image overlapping the border, 
                           so that part of the image which is overflowing this box will not be visible anymore. */

        /* With display: table; popup__content functions as a table. 
        We are basically faking and saying that this is a table.
        And then the popup__left and the popup__right they are both table cells.
        And then the browser will automatically give them the same height. */
        display: table; // child has display: table-cell;

        // initial position of the content, for animation effect.
        /* you can only have one transform property in each declaration block.
           If we have more than one transform property in one declaration block, it will not work.
           solution is to repeat the transform values to have desired effect. */
        transform: translate(-50%, -50%) scale(.25); // repeating translate(-50%, -50%) from absCenter mixin code.
                                                    // scale(.25) - initial position
        opacity: 0; // initial position

        /* Delay this transition here by .2 seconds. So that first we allow the black background
           to come in and then after that we fade in our popup box. */
        transition: all .5s .2s; 
    }

    &__left {
        width: 33.333333%; // 1/3 of 
        /* We could use float to have popup__left and popup__right element side by side.
         But there is a problem with that. The popup__left takes the entire height,
         and then the popup__right one only has less height, of course, 
         because that's the space that it's content occupies.
         That's completely normal behavior.
         Now what we want here is that these boxes(left and right) actually have the SAME height 
         because then it's easier to center the content in the popup__right vertically in the middle
         of all of this white space. And so sometimes that's a very useful thing to do.

         There is a very ncie technique to achieve this - Using display:table-cell instead of floats. */
         //float: left; // so that left and right will be side by side

         display: table-cell; // make parent as display: table;
    }

    &__right {
        width: 66.666666%; // 2/3 of 
        //float: left; // so that left and right will be side by side. We  could also use float:right here.
        display: table-cell; // make parent as display: table;
        vertical-align: middle; // We can use this property on table cell, in order to center align the content/
        padding: 3rem 5rem;
    }

    &__img {
        display: block;
        width: 100%;
    }

    &__text {
        font-size: 1.4rem;
        margin-bottom: 4rem;

        /* Column layout is something really new in CSS, 
        but we can make it work in most of the modern browsers already.
        All we have to do is to specify a property called column-count. */
        -moz-column-count: 2;
        -moz-column-gap: 4rem; // gap/space between columns.
        -moz-column-rule: 1px solid $color-grey-light-2;

        column-count: 2;
        column-gap: 4rem; // gap/space between columns.
        column-rule: 1px solid $color-grey-light-2; // just like a border which will be exactly in the middle of the two columns

        -moz-hyphens: auto;
        -ms-hyphens: auto;
        -webkit-hyphens: auto;
        hyphens: auto; /*  It will automatically figure out where to place the hyphens.
                           It also nicely changes the hyphenation as the width changes.
                           But in order for this to work correctly, 
                           we have to define the document language e.g. <html lang="en"> */
        /* BTW These columns and the hyphens properties allows us to get closer 
           to the traditional print designs like a magazine layout or a real newspaper.
           That's why these properties were introduced. */
    }


    // POPUP OPEN STATES
    /* when we click on the 'Book Now' button on the back cards, then the anchor will basically become this popup,
       i.e. target, as we have anchored it to #popup div. 
       
       We have a pseudo class called target, which applies to an element which is the target 
       when we click on a button, or basically when the URL changes to having target in it. */
       &:target {
        opacity: 1;
        visibility: visible;
    }

    // POPUP OPEN STATES
    /* We want to style the content at the moment where the popup is open. */
    // .popup__content is child element of .popup
    &:target &__content {
        transform: translate(-50%, -50%) scale(1); // repeating translate(-50%, -50%) from absCenter mixin code.
        opacity: 1; // initial position
    }

    &__close {
        &:link,
        &:visited {
            color: $color-grey-dark;
            position: absolute;
            top: .5rem;
            right: 1.5rem;
            font-size: 3rem;
            text-decoration: none;
            display: inline-block;
            line-height: 1;
            transition: all .2s;
        }

        &:hover,
        &:active {
            color: $color-primary;
        }
    }
}

@include respond(tab-port) {

    .popup {
        
        &__content {
            width: 85%;
        }

        &__left {
            width: 100%; 
            display: table-row; // make parent as display: table;
        }

        &__right {
            width: 100%; 
            vertical-align: middle; // We can use this property on table cell, in order to center align the content/
            padding: 2rem 3rem;

            .heading-secondary {
                display: block;
                text-align: center;
            }

            .heading-tertiary {
                text-align: center;
            }
            
            .btn {
                display: block;
                width: 60%;
                margin: 0 auto;
                text-align: center;
            }
        }

        &__img {
            display: inline-block;
            width: 50%;
        }

        &__text {
            margin: 0 1.5rem 2rem 1.5rem;

            -moz-column-count: unset;
            -moz-column-gap: unset; // gap/space between columns.
            -moz-column-rule: unset;

            column-count: unset;
            column-gap: unset; // gap/space between columns.
            column-rule: unset; // just like a border which will be exactly in the middle of the two columns
        }

    }
}