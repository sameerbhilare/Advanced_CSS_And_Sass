
.story {
    width: 75%;
    margin: 0 auto; // to center this element
    box-shadow: 0 3rem 6rem rgba($color-black, .1);
    background-color: rgba($color-white, .6); // to have opaque view so that background video can be visible.
    border-radius: 3px;
    padding: 6rem;
    padding-left: 9rem;
    font-size: $default-font-size;

    // to have skewed rectangle;
    transform: skewX(-12deg);

    &__shape {
        width: 15rem;
        height: 15rem;
        float: left; // in order to make rest of the content float around it.

        /* 
           shape-outside only works when you have specified width, height and float.
           shape outside - all it does is to define where the content floats around the element 
           in this case, a circle.
           And if we actually want the element to look like a circle, we need to use clip-path property.

           Circle radius to be 50% of the height and width specified. 
           bcz we want circle diameter to be equal to height and width of the this element.
           at 50% 50% means that the center of the circle to be exactly the center horizontally and vertically.
        */
        -webkit-shape-outside: circle(50% at 50% 50%);
        shape-outside: circle(50% at 50% 50%);

        // to clip the photo in circular shape
        -webkit-clip-path: circle(50% at 50% 50%);
        clip-path: circle(50% at 50% 50%);

        /* best way to move around an element that is floated is to actually not mess with margins 
           or anything like that, but we should just use a transform. */
        transform: translateX(-3rem) skewX(12deg); // skewX to have opposite effect for inner elements

        position: relative; // bcz child &__caption is absolute

        /* since &__img scales the image, that adds horizontal/vertical scroll which we don't want. */
        overflow: hidden;
    }

    
    &__img {
        /* Flexible images for responsive web design always need a width. Always, without any exception! */
        /* Here we have to use height: 100% instead of width: 100% 
           because this particular image is wider than it's height, 
           so if we give it a 100% width then, of course, it cannot fill this entire circle. */
        height: 100%; // 100% of parent height (15rem)
        
        transform: translateX(-4rem) scale(1.4);
        /* Whenever we're dealing with animations and translating stuff, 
           when something weird happens, then many times this back face visibility fixes that.
           No one really knows why it happens this way or why this works this way, but it fixes it. */
        backface-visibility: hidden;

        transition: all .5s;
    }

    &__text {
        transform: skewX(12deg); // skewX to have opposite effect for inner elements
    }

    &__caption {
        position: absolute;
        // center alignment in case of position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, 20%); // 20% (initial position) bcz we want to have fades in animation effect.
        text-transform: uppercase;
        color: $color-white;
        font-size: 1.7rem;
        text-align: center;
        opacity: 0; // initial state
        transition: all .5s;
        backface-visibility: hidden; // just to fix small (not noticable) glitch(moving little up) in the animation.
    }

    // as soon as story is hovered, we want to change the caption
    &:hover &__caption {
        opacity: 1;
        transform: translate(-50%, -50%); // need to use same translate function as above to have desired effect.
    }

    // as soon as story is hovered, the img should zoom out and blurr and little bit darkened.
    &:hover &__img {
        transform: translateX(-4rem) scale(1); /* zoom out effect. Also need to pass translateX(-4rem)
                                                  which is same as initial position to have desired effect. */

        /* Very cool property - filter. 
           The filter CSS property applies graphical effects like blur or color shift to an element. 
           Filters are commonly used to adjust the rendering of images, backgrounds, and borders.
           
           It has lot of options like -
           blur, brightness, opacity, contrast, drop-shadow, grey-scale, hue-rotate, etc. */
        filter: blur(2px) brightness(80%); // brightness() - value > 100 makes it brighter, value < 100 darker. 
    }
    
}